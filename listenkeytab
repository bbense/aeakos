#!/usr/bin/perl

###################################################################
# This script runs from inetd and triggers an external program
# that transfers a keytab to it's remote host. 
#  
###################################################################

sub usage { 
    print STDERR <<EOF;
  usage:   $0 [options] hostname

    options:
      -quiet              No messages.
      -verbose            Noisy.

EOF
} 

use Sys::Syslog qw(:standard :macros);

# Upgrade this to syslog... 
sub errmsg { 
  if ( $verbose ) { 
    print STDERR "@_\n" ;
  }
  syslog(LOG_ERR,"@_"); 
}

sub msg { 
  if ( $verbose ) { 
    print STDERR "@_\n";
  } 
  syslog(LOG_INFO,"@_"); 
 
} 


sub errexit 
{ 
   errmsg @_ ;
   closelog(); 
   exit 1 ; 

} 


#
# getlock ( $dir ) Create a lock in $dir
#
sub getlock {
  my $LOCKDIR = "keytab.lock" ; 
  my ( $dir ) = ( @_ ) ; 
  if ( mkdir( "$dir/$LOCKDIR" ) ) { 
    return 1 ; 
  } else { 
    return undef ; 
  }

}

#
# freelock ( $dir) Free the resulting lock.
#
sub freelock { 
  my $LOCKDIR = "keytab.lock" ; 
  my ( $dir ) = ( @_ ) ;
# This could go bad in unexpected ways. 
#  system("/bin/rm -rf $dir/$LOCKDIR" ) ; 
  if ( -d "$dir/$LOCKDIR" ) { 
    unless ( rmdir ( "$dir/$LOCKDIR" ) ) { 
      errmsg"Trouble removing $dir/$LOCKDIR\n"; 
    } 
  }
} 


# 
#
# Main 
#
# ------------------------------------------------------------------------

# You need to set this for what makes sense on your KDC. 
$AEAKOSROOT = "/dev/null" ; 

my $sdir = "$AEAKOSROOT/autokeytab/listen" ; 
my $queue = "$sdir/queue" ; 

$LOGGER = '/bin/logger -p auth.error -t listenkeytab' ; # On Solaris... 
$TIMEOUT = 120 ; # two minutes to get a lock and write a ip addr is plenty.

use Getopt::Long;

$quiet   = "yes" ;            # No messages.
$verbose = '' ;               # Noisy.
                  
my $host = "" ;                                               
my $myaddr = "" ; 
my $ip = "empty" ; 

$result = GetOptions ("quiet"    => \$quiet,    
		      "verbose"  => \$verbose,
                           );  


use Net::hostent ; 
use Socket ;
use IO::Handle;
use POSIX qw( dup2 setsid ) ;

# Write this 
# to do either the instkey hostname thing or run via inetd.

# I've been thinking long and hard about this and I think 
# This version will melt in hard use. I need a way to serialize
# the creatation and to rapidly exit the server. The best solution
# seems to be to split this into two parts. One which give an ip
# addr does all the kerberos lifting and another which just 
# reads figures out the ip addr, tells the other program and
# exits. If we use named pipes we can even run the ip listener
# as nobody ( reader needs to be robust in this case though).




openlog "listenkeytab","ndelay,pid" , LOG_AUTH;


# We are running from inetd and need to find out the peer

$mysockaddr = getpeername(STDIN) or die;
($port, $myaddr) = sockaddr_in($mysockaddr) or die;
$ip = inet_ntoa($myaddr) or die;


unless ( $myaddr ) { 
  errexit "Could not find address" ; 
} else { 
  if ( $ip =~ /^\d{1,3}\.\d{1,3}.\d{1,3}.\d{1,3}$/ ) { 
    print "You are $ip.\n" ; 
  } else{ 
    print "You are unknown\n" ; 
  }
} 

# Close connection and fork. 
close(STDIN) ; 
close(STDOUT) ; 
close( STDERR ); 

# Check for existance of directory
unless ( -d $sdir && -p $queue ) { 
  errexit "Autokeytab area not configured, Run taylor kdcktsetup"; 
}

# Stolen from perlipc doc.

chdir "$sdir"               or errexit "Can't chdir to $sdir: $!";
open STDIN, '/dev/null' or errexit "Can't read /dev/null: $!";
open STDOUT, "| $LOGGER"
  or die "Can't write to $LOGGER: $!";
defined(my $pid = fork) or die "Can't fork: $!";
exit if $pid;
setsid                  or die "Can't start a new session: $!";
open STDERR, '>&STDOUT' or die "Can't dup stdout: $!";

# Various testing cruft. 
# msg "We are in child and attempting to write $ip to pipe" ;
# print "Does logger work?\n"; 
#
#sleep 100 ; 
#
#print "We slept 100 did client close?\n" ; 

# Set an alarm: if the job takes too long, issue an error
# message, clean up, and exit.  We don't want these things to
# stick around forever if there's a problem.
#
$SIG{"ALRM"} = sub
  {
    freelock($sdir);
    errexit "Timeout in listenkeytab: over $TIMEOUT seconds elapsed";
  };
alarm $TIMEOUT;

# Get lock with mkdir hack. 

until ( getlock($sdir) ) {
  sleep 1 ;
}

# Open named pipe. write ip addr.
open( QUEUE , "> $queue" )  or errexit "Open of $queue failed: $!" ;  # Note this blocks until a reader opens.
print QUEUE "$ip\n" or errexit "Write to $queue failed: $!" ;
close ( QUEUE ); 
#
# Cleanup
#
freelock($sdir);
errmsg "Queued $ip" ; 

exit 0; 

# Belt and suspenders... 
END { freelock($sdir); } 
