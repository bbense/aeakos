#!/usr/local/bin/perl

###################################################################
# This command transfers a keytab to it's remote host. 
#  
###################################################################

sub usage { 
    print STDERR <<EOF;
  usage:   $0 [options] hostname

    options:
      -quiet              No messages.
      -verbose            Noisy.
      -force              Overwrite any existing data. 
      -test               Don\'t actually perform actions.

EOF
} 

use Sys::Syslog qw(:standard :macros);



# Upgrade this to syslog... 
sub errmsg { 
  unless( $ask_pipe ) { 
    print STDERR "@_\n" ;
  } else { 
    syslog(LOG_ERR,"@_"); 
  }
}

sub msg { 
  unless( $ask_pipe ) { 
    print STDERR "@_\n" unless( $quiet ) ;
  } else { 
    syslog(LOG_INFO,"@_"); 
  }
} 


sub errexit 
{ 
   errmsg @_ ;
   unless ( $ask_pipe ) { # We don't want to exit ever if $ask_pipe. 
     usage ; 
     closelog(); 
     exit 1 ; 
   } 

} 


# 
#
# Main.
#
# ------------------------------------------------------------------------


my $sdir = "/var/heimdal/autokeytab" ; 
my $idaho = "$sdir/private" ; #It's a joke son... 
$queue = "$sdir/listen/queue" ;
my $taylordir = "/afs/slac/g/scs/systems/system.info" ; 

$SSH = "" ; 
@ssh_list = ( "/opt/openssh/bin/ssh", "/usr/local/bin/ssh" ) ;
$LOGGER = '/bin/logger' ; # On Solaris... 
# Find a working ssh, if not available punt now. 

foreach $file ( @ssh_list ) { 
  if ( -x $file ) { 
    $SSH = $file ;
    last ;
  }
}



use Getopt::Long;

$quiet   = "yes" ;            # No messages.
$verbose = '' ;               # Noisy.
$force   = ''  ;              # Overwrite any existing data. 
$test    = '' ;               # Don\'t actually perform actions.
$ask_pipe = "true" ;        # Ask socket for hostname. 

# hmm.... 
# $pid_reader ;                   
my $host = "" ;                                               
my $myaddr = "" ; 
my $ip = "empty" ; 

$result = GetOptions ("quiet"    => \$quiet,    
		      "force"    => \$force,      
		      "verbose"  => \$verbose,
		      "test"     => \$test, 
                           );  


use Net::hostent ; 
use Socket ;
use IO::Handle;
use POSIX qw( dup2 setsid ) ; 

# Write this 
# to do either the instkey hostname thing or run via inetd.

# I've been thinking long and hard about this and I think 
# The single deamon version will melt in hard use. I need a way to serialize
# the creatation and to rapidly exit the server. The best solution
# seems to be to split this into two parts. One which given an ip
# addr does all the kerberos lifting and another which just 
# reads, figures out the ip addr, tells the other program and
# exits. If we use named pipes we can even run the ip listener
# as nobody ( reader needs to be robust in this case though).



if ( $ARGV[0] ) { 
  $host = $ARGV[0] ;
  print "Keytab transfer @ARGV\n" if ( $verbose) ;
  $ask_pipe = "" ; 
} else {			# Assume we are running as a daemon.
  $ask_pipe = "true" ; 
  openlog "instkeytab","ndelay,pid" , LOG_AUTH;
}

unless ( $SSH) { 
  $ask_pipe = "" ; 
  errexit "No ssh found." ; 
}


# There is a seperate taylor part to set up the files needed
# by this program. 
# First check access to sdir
if (! -w $idaho) { 
  print "You are not root.  Run this via sudo.\n" ; 
  exit 1; 
} 

umask(077); 


if ( $host ) {
  # Check for $host in DNS 
  $host = lc( $host ) ; 
  unless ($h = gethost($host)) {
    errexit "$0: no such host: $host\n";
  }
  if ( $verbose ) { 
    printf "\n%s is %s%s\n",
      $host,
	lc($h->name) eq lc($host) ? "" : "*really* ",
	  $h->name;
  }
  $myaddr = $h->addr ;

} else {
# We are running as a deamon and need to read from the queue

  unless ( -p $queue ) { 
    $ask_pipe = "" ; # Side effects are evil
    errexit "Autokeytab area not configured, Run taylor kdcktsetup w/admin token"; 
  }


# Stolen from perlipc doc.

  chdir "$idaho"               or errexit "Can't chdir to $idaho: $!";
  open STDIN, '/dev/null' or errexit "Can't read /dev/null: $!";
  open STDOUT, "| $LOGGER"
    or die "Can't write to $LOGGER: $!";
  defined(my $pid = fork) or die "Can't fork: $!";
  exit if $pid;
  setsid                  or die "Can't start a new session: $!";
  open STDERR, '>&STDOUT' or die "Can't dup stdout: $!";

# Sig Handlers ??? 
# Listen on the pipe in an infinite loop. Stolen from banner_web_listener
#
  PETER: while (1) {
      open(PIPE, "<$queue")
	or die "Cannot open '$queue' for read: $!";
    PEPPER: while (<PIPE>) {
	chomp;
	# Spawn a child to deal with the message and go right back to
	# listening.
	#
	if ( $_ =~ /^\d{1,3}\.\d{1,3}.\d{1,3}.\d{1,3}$/ ) { 
	  $ip = $_ ;
	  # This would be the place to put a process limit if I understand
	  # pipes correctly. Basically if we have many concurrent requests
	  # the pipe won't get EOF. So we count here and limit, then drop
	  # the limit back to zero when we get EOF. Cheap but maybe 
	  # ineffective since this process doesn't do a whole lot but read
	  # and fork. Given that the writer process needs a lock and times
	  # out if it doesn't get it, I think we can skip the idea for now. 
	  # Another idea would be to have working child write a pid file
	  # and count them here via a readdir.
	FORK_1: {
	    if ( $pid = fork() ) {
	      # We are the parent; wait for the first child and then return
	      # to our looping.
	      waitpid $pid, 0;
	      next PEPPER ; #a goto is a goto by any other name and just as evil. 
	    } elsif ( defined $pid ) {
	      # We are the child; fall out of this FORK and do our thing.
	    } elsif ( $! =~ /No more process/ ) {
	      # EAGAIN should be temporary.
	      sleep 5;
	      redo FORK_1;
	    } else {
	      # Who knows?
	      die "Error in FORK_1: $!";
	    }
	  }

	FORK_2: {
	    if ( $pid = fork() ) {
	      # We are the middle child; we should exit immediately.
	      exit;
	    } elsif ( defined $pid ) {
	      # We are the grandchild; fall out of this FORK and do our thing.
	      # Need to break out of both while loops. 
	      setsid ; 
	      $ask_pipe = ""; # Errexit should be real from now on. 
	      last PETER; # The piper... Okay it seemed funny when I wrote it.
	    } elsif ( $! =~ /No more process/ ) {
	      # EAGAIN should be temporary.
	      sleep 5;
	      redo FORK_2;
	    } else {
	      # Who knows?
	      die "Error in FORK_2: $!";
	    }
	  }
	  errmsg "Reached unreachable branch of FORK_2" ; 
	} else {		# Read garbage
	  errmsg "Read garbage on $queue" ; 
	}
      }
      close(PIPE)
	or die "Error closing '$queue': $!";
    } # Main deamon roach motel... 

  $myaddr = inet_aton($ip) ; 
}

# In deamon mode this only gets executed in the child. 
# We could put a lock here to throttle the processes. 
#
errexit "Could not find address" unless ( $myaddr ) ;

if ($h = gethostbyaddr($myaddr)) {
  if ( $host ) { 
    if (lc($h->name) ne lc($host)) {
      printf "\tThat addr reverses to host %s!\n", $h->name if ( $verbose );
    }
  } else { 
    $host = lc($h->name); 
  }
} else { 
  errexit "$ip does not resolve" ; 
} 

$host_fqdn = lc($h->name);

# Check for host in .slac.stanford.edu
# and for sanity in general. 
if ( $host_fqdn =~ /[^A-Za-z0-9\-\.]/ ) {    
  errexit "$ip has funny cars..."  ; #ooo, I've waited a long time to use that error message..
}


unless ( $host_fqdn =~ /\.slac\.stanford\.edu$/ ) { 
  errexit "$ip not in .slac.stanford.edu" ; 
}

$hn = (split(/\./,$host_fqdn))[0]; 

$localkeytab = "$idaho/krb5.keytab.$host_fqdn" ; 

# See if host has run taylor

$TIMEOUT = 5 ;
$now = time(); 

unless ( -f "$taylordir/$hn/taylor.lastrun" ) { 
  errexit "$hn has not run taylor" ; 
} else {
  $lastrun = (stat(_))[9] ;	#Evil perl line noise fu.. 
  # Check for
  $lastrun  = $now - $lastrun ; 
  if ( $lastrun > ($TIMEOUT*60*60*24) ) { 
    errexit "$hn taylor run older than $TIMEOUT days." ; 
  }
}

#
# Check if host keytab already exists. 
#

if ( -f $localkeytab ) { 
  # If the file is less than $TIMEOUT minutes old, just exit.
  $lastkeyextract = (stat(_))[9] ; #Evil perl line noise fu.. 
  $lastkeyextract = $now - $lastkeyextract ;
  unless ( $lastkeyextract > ($TIMEOUT*60) ) { 
    errexit "Key request less than $TIMEOUT minutes after previous request for $host_fqdn."; 
  } else { 
    unlink( $localkeytab ); 
  }
  
} elsif ( -e _ ) {
  errexit "$localkeytab exists but is not plain file." ; 
}
# extract keytab.

msg("extracting keytab for $host_fqdn" ); 

# Add extra services here, per host configuration? or just -s nfs for now

system("/var/heimdal/autokeytab/extkeytab -q -s nfs -ktab $localkeytab $host_fqdn < /dev/null" );


#
# Transfer
#
#msg("Runing /bin/cat $localkeytab | $SSH -x -1 -i $idaho/id_keytab -l root $host " ); 

if ( -f $localkeytab ) { 
  system("/bin/cat $localkeytab | $SSH -x -i $idaho/id_keytab -l root $host " );
} else { 
  errexit "Error in creating $localkeytab" ; 
}

#
# Cleanup
#

exit 0; 
